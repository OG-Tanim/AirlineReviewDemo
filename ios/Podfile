# Define minimum iOS version
platform :ios, '13.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  # Enable dynamic frameworks and modular headers for Swift pods
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods(File.dirname(File.realpath(__FILE__)))

  target 'RunnerTests' do
    inherit! :search_paths
  end
end

# === FIX FLAGS AND ARCHITECTURE HERE ===
post_install do |installer|
  installer.pods_project.targets.each do |target|

    # Patch BoringSSL-GRPC to remove unsupported flags
    if target.name == 'BoringSSL-GRPC'
      target.build_configurations.each do |config|
        flags = config.build_settings['OTHER_CFLAGS']
        if flags.is_a?(Array)
          config.build_settings['OTHER_CFLAGS'] = flags.reject { |flag| flag.include?('-G') || flag.include?('-GCC_WARN_INHIBIT_ALL_WARNINGS') }
        elsif flags.is_a?(String)
          config.build_settings['OTHER_CFLAGS'] = flags.gsub('-G', '').gsub('-GCC_WARN_INHIBIT_ALL_WARNINGS', '')
        end

        cppflags = config.build_settings['OTHER_CPLUSPLUSFLAGS']
        if cppflags.is_a?(Array)
          config.build_settings['OTHER_CPLUSPLUSFLAGS'] = cppflags.reject { |flag| flag.include?('-G') || flag.include?('-GCC_WARN_INHIBIT_ALL_WARNINGS') }
        elsif cppflags.is_a?(String)
          config.build_settings['OTHER_CPLUSPLUSFLAGS'] = cppflags.gsub('-G', '').gsub('-GCC_WARN_INHIBIT_ALL_WARNINGS', '')
        end
      end
    end

    flutter_additional_ios_build_settings(target)

    target.build_configurations.each do |config|
      # Exclude arm64 for simulator (especially on Intel Mac)
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'

      # Set the deployment target explicitly again (some pods override it)
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'

      # Remove unsupported flags globally just in case
      flags = config.build_settings['OTHER_CFLAGS']
      if flags.is_a?(Array)
        config.build_settings['OTHER_CFLAGS'] = flags.reject { |flag| flag.include?('-G') || flag.include?('-GCC_WARN_INHIBIT_ALL_WARNINGS') }
      elsif flags.is_a?(String)
        config.build_settings['OTHER_CFLAGS'] = flags.gsub('-G', '').gsub('-GCC_WARN_INHIBIT_ALL_WARNINGS', '')
      end

      cppflags = config.build_settings['OTHER_CPLUSPLUSFLAGS']
      if cppflags.is_a?(Array)
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = cppflags.reject { |flag| flag.include?('-G') || flag.include?('-GCC_WARN_INHIBIT_ALL_WARNINGS') }
      elsif cppflags.is_a?(String)
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = cppflags.gsub('-G', '').gsub('-GCC_WARN_INHIBIT_ALL_WARNINGS', '')
      end
    end
  end
end
